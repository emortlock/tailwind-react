{
  "TWR_Stateless_Component": {
    "prefix": "twr-stateless",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import classnames from 'classnames'",
      "",
      "import { TailwindContext } from '../context'",
      "",
      "const ${1:NewComponent} = ({ is, children, className, ...rest }) => {",
      "  const Component = is",
      "",
      "  return (",
      "    <TailwindContext.Consumer>",
      "      {theme => (",
      "        <Component {...rest} className={classnames(className)}>",
      "          {children}",
      "        </Component>",
      "      )}",
      "    </TailwindContext.Consumer>",
      "  )",
      "}",
      "",
      "$1.propTypes = {",
      "  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),",
      "  children: PropTypes.node,",
      "  className: PropTypes.string,",
      "}",
      "",
      "$1.defaultProps = {",
      "  is: '${2:div}',",
      "  children: undefined,",
      "  className: undefined,",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "Tailwind React stateless component"
  },
  "TWR_Test": {
    "prefix": "twr-test",
    "body": [
      "import React from 'react'",
      "import { shallow } from 'enzyme'",
      "",
      "import { ${1:Component} } from '..'",
      "",
      "const setup = (testProps = {}) => {",
      "  const props = Object.assign({}, testProps)",
      "",
      "  const wrapper = shallow(<$1 {...props} />)",
      "",
      "  return {",
      "    props,",
      "    wrapper,",
      "  }",
      "}",
      "",
      "describe('$1', () => {",
      "  it('renders matching snapshot', () => {",
      "    const { wrapper } = setup()",
      "",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Tailwind React stateless component"
  }
}
